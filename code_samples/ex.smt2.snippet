; one variable per array entry
(declare-fun x0 () (_ BitVec 32))
(declare-fun x1 () (_ BitVec 32))
; a variable to represent 'sum'
(declare-fun sum () (_ BitVec 32))
; one 'sum' variable per loop iteration
(declare-fun sum0 () (_ BitVec 32))
(declare-fun sum1 () (_ BitVec 32))
; unrolled lines 5, 6 in Listing 1
(assert 
  (or (and (= x0 #x00000000) (= sum0 #x00000000)) 
    (or (and (bvsgt x0 #x00000000) (= sum0 #x00000001)) 
        (and (bvslt x0 #x00000000) (= sum0 #xffffffff)))))
; second iteration of unrolling lines 5, 6
(assert 
  (or (and (= x1 #x10000000) (= sum1 #x10000000)) 
    (or (and (bvsgt x1 #x10000000) (= sum1 #x10000001)) 
        (and (bvslt x1 #x10000000) (= sum1 #xffffffff)))))
; merge function for 'sum' variable
(assert (= sum (bvadd sum0 sum1)))
; branch on line 9 of Listing 1
(assert (bvslt sum #x00000000))
